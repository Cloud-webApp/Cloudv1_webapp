name: Build AMI after PR Merge

on:
  push:
    branches:
      - main

jobs:
  build-ami:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Create zip archive from the current directory
        run: |
          touch .env
          echo 'DB_PORT=${{ secrets.DB_PORT }}' >> .env
          echo 'DB_USER=${{ secrets.DB_USER }}' >> .env
          echo 'DB_PASSWORD=${{ secrets.DB_PASSWORD }}' >> .env
          echo 'DB_DATABASE=${{ secrets.DB_DATABASE }}' >> .env
          echo 'DB_HOST=${{ secrets.DB_HOST }}' >> .env
          echo 'CSVPATH=./users.csv' >> .env
          mkdir artifacts
          zip -r artifacts/webapp.zip . -x "*.git*"

      - name: Install Packer
        run: |
          PACKER_VERSION="1.9.4"  
          wget https://releases.hashicorp.com/packer/${PACKER_VERSION}/packer_${PACKER_VERSION}_linux_amd64.zip
          unzip packer_${PACKER_VERSION}_linux_amd64.zip
          sudo mv packer /usr/local/bin/
          packer --version

      - name: Initialize Packer
        run: packer init main.pkr.hcl

      - name: Build Custom AMI
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: packer build main.pkr.hcl

      - name: Instance Refresh automation / Continuous Delivery
        run: |
          sudo apt-get install jq
          ASG_NAME=${{secrets.ASGNAME }}  
          LAUNCH_CONFIG=${{secrets.LaunchTemplateName }}
          IMAGE=$(jq -r '.builds[-1].artifact_id' manifest.json | cut -d':' -f2)
          IMAGE_ID=$(jq -n \
            --arg img "$IMAGE" \
            '{"ImageId": $img}')
          aws ec2 create-launch-template-version \
            --launch-template-name "$LAUNCH_CONFIG" \
            --version-description updateAMI --source-version 1 \
            --launch-template-data="$IMAGE_ID"
          TEMPLATE_VERSION=$(aws ec2 describe-launch-template-versions --launch-template-name="$LAUNCH_CONFIG" \
            --filters="Name=is-default-version,Values=false" \
            --query 'sort_by(LaunchTemplateVersions, &CreateTime)[-1].[VersionNumber]' --output text)
          aws autoscaling update-auto-scaling-group --auto-scaling-group-name $ASG_NAME \
            --launch-template LaunchTemplateName="$LAUNCH_CONFIG",Version=$TEMPLATE_VERSION
          aws autoscaling start-instance-refresh \
            --auto-scaling-group-name $ASG_NAME --strategy Rolling
          printf "Instance refresh in progress"
          while true;
          do
            instance_refresh_status=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name $ASG_NAME \
              --query "InstanceRefreshes[0].Status" --output text)
            if [ "$instance_refresh_status" = "Successful" ]; then
              printf "\nInstance refresh successful!"
              break
            fi
            if [ "$instance_refresh_status" = "Cancelling" ] || [ "$instance_refresh_status" = "Cancelled" ] || [ "$instance_refresh_status" = "Failed" ]; then
              printf "\nInstance refresh failed!"
              exit 1
            fi
            echo -ne "."
            sleep 10
          done

      # asg_launch_config